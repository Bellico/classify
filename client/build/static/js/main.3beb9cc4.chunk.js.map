{"version":3,"sources":["hooks/request-helpers.ts","models/rule-card.model.ts","services/storage.service.ts","hooks/classify-hooks.ts","layout/home-page.tsx","layout/header-working.tsx","layout/primary-actions.tsx","components/rule-card.tsx","services/dialog.service.ts","components/confirm-dialog.tsx","services/confirm-dialog.service.tsx","layout/working-page.tsx","App.tsx","index.tsx","classify.svg"],"names":["getDataRequest","path","request","a","async","fetch","response","json","useRequest","useState","result","setResult","loading","setLoading","setRequest","useEffect","options","method","uri","fetchRequest","RuleCardModel","fileTypes","actionType","targetPath","isActive","isWorking","this","length","hasValue","StorageService","localStorage","getItem","setItem","cards","JSON","parse","map","c","Object","assign","stringify","useCheckPath","requestResult","requestLoading","checked","useRulesQueue","startPath","setCards","sourcePath","ruleToApply","setRuleToApply","headers","body","action","useFetchApplyRule","applyResult","applyLoading","queue","setQueue","success","splice","HomePage","startWorkingOn","setStartPath","startPathChecked","handleChangeDebounced","debounce","value","start","className","Zoom","in","src","classify","alt","TextField","defaultValue","onChange","e","target","onKeyUp","event","keyCode","label","placeholder","fullWidth","color","InputProps","endAdornment","InputAdornment","position","Fade","Button","onClick","variant","endIcon","HeaderWorking","countFiles","onBackHome","Typography","PrimaryActions","handleAddRule","handleApplyRules","countRule","startIcon","RuleCard","fileTypeList","card","onSaveChanges","onDelete","applyRule","targetPathChecked","handleChange","name","Checkbox","edge","FormControl","Select","disabled","multiple","renderValue","selected","join","fileTypeName","MenuItem","key","indexOf","ListItemText","primary","RadioGroup","style","flexDirection","FormControlLabel","control","Radio","Avatar","canApply","size","IconButton","LinearProgress","DialogService","container","resolve","node","document","createElement","classList","add","close","ReactDOM","unmountComponentAtNode","removeChild","appendChild","render","Promise","ConfirmDialog","props","Dialog","open","onClose","onConfirm","confirm","aria-labelledby","aria-describedby","DialogTitle","id","textTitle","DialogContent","DialogContentText","textContent","DialogActions","textCancel","autoFocus","textConfirm","ConfirmDialogService","data","setDialog","WorkingPage","useFetchExtensions","resultFetchextensions","extensionsLoading","countActiveCards","filter","saveChangesCard","deleteCard","_delete","index","show","applyRuleCard","extensions","theme","createMuiTheme","palette","type","main","ThemeProvider","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3beb9cc4.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst baseUrlApi = 'http://localhost:3001/api/'\r\n\r\nasync function getDataRequest(path: string, request: RequestInit): Promise<any> {\r\n    const response = await fetch(baseUrlApi + path, request);\r\n\r\n    return await response.json();\r\n}\r\n\r\nexport function useRequest(): [any, boolean, (request: { uri: string, options?: RequestInit }) => void] {\r\n\r\n    const [result, setResult] = useState();\r\n    const [loading, setLoading] = useState(false);\r\n    const [request, setRequest] = useState<{ uri: string, options?: RequestInit }>();\r\n\r\n    useEffect(() => {\r\n\r\n        async function fetchRequest() {\r\n            if (request) {\r\n                if (!request.options) {\r\n                    request.options = {\r\n                        method: 'GET'\r\n                    }\r\n                }\r\n\r\n                setLoading(true);\r\n                const result = await getDataRequest(request?.uri, request?.options);\r\n                setResult(result);\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n        fetchRequest();\r\n\r\n    }, [request]);\r\n\r\n    return [result, loading, setRequest];\r\n}\r\n","export class RuleCardModel {\r\n\r\n    fileTypes: string[];\r\n\r\n    actionType: 'move' | 'deleted';\r\n\r\n    targetPath?: string;\r\n\r\n    isActive: boolean;\r\n\r\n    isWorking: boolean\r\n\r\n    get hasValue(): boolean {\r\n        if (this.fileTypes.length === 0) {\r\n            return false\r\n        }\r\n\r\n        if (this.actionType === 'move' && !this.targetPath) {\r\n            return false\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    get canApply(): boolean {\r\n        if (!this.isActive) {\r\n            return false\r\n        }\r\n\r\n        return this.hasValue;\r\n    }\r\n\r\n    constructor() {\r\n        this.actionType = 'move';\r\n        this.isActive = true;\r\n        this.isWorking = false;\r\n        this.fileTypes = [];\r\n    }\r\n\r\n}\r\n","import { RuleCardModel } from '../models/rule-card.model';\r\n\r\nexport const StorageService = {\r\n    getClassifyPath: function () {\r\n        return localStorage.getItem('pathFolderToClassify') || '';\r\n    },\r\n\r\n    saveClassifyPath: function (path: string) {\r\n        localStorage.setItem('pathFolderToClassify', path);\r\n    },\r\n\r\n    getCards: function () {\r\n        const cards = localStorage.getItem('cards');\r\n\r\n        return cards ?\r\n            JSON.parse(cards).map((c: any) => Object.assign(new RuleCardModel(), c))\r\n            : [];\r\n    },\r\n\r\n    saveCards: function (cards: RuleCardModel[]) {\r\n        localStorage.setItem('cards', JSON.stringify(cards));\r\n    }\r\n}\r\n","import { useRequest } from './request-helpers';\r\nimport { useState, useEffect } from 'react';\r\nimport { RuleCardModel } from '../models/rule-card.model';\r\nimport { StorageService } from '../services/storage.service';\r\n\r\nexport function useCheckPath(path: string) {\r\n    const [requestResult, requestLoading, setRequest] = useRequest();\r\n\r\n    useEffect(() => {\r\n        if (path) {\r\n            setRequest({\r\n                uri: `checked-path?sourcePath=${path}`\r\n            })\r\n        }\r\n    }, [path, setRequest]);\r\n\r\n    return [requestResult && requestResult.checked, requestLoading];\r\n}\r\n\r\nexport function useFetchExtensions(path: string) {\r\n    const [requestResult, requestLoading, setRequest] = useRequest();\r\n\r\n    useEffect(() => {\r\n        if (path) {\r\n            setRequest({\r\n                uri: `extensions?sourcePath=${path}`\r\n            })\r\n        }\r\n    }, [path, setRequest]);\r\n\r\n    return [requestResult, requestLoading];\r\n}\r\n\r\nexport function useFetchApplyRule(sourcePath: string) {\r\n    const [ruleToApply, setRuleToApply] = useState();\r\n    const [requestResult, requestLoading, setRequest] = useRequest();\r\n\r\n    useEffect(() => {\r\n        if (ruleToApply) {\r\n            setRequest({\r\n                uri: 'rule',\r\n                options: {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        action: ruleToApply.actionType,\r\n                        targetPath: ruleToApply.targetPath,\r\n                        fileTypes: ruleToApply.fileTypes,\r\n                        sourcePath\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }, [ruleToApply, sourcePath, setRequest]);\r\n\r\n    return [requestResult, requestLoading, ruleToApply, setRuleToApply];\r\n}\r\n\r\nexport function useRulesQueue(startPath: string): [RuleCardModel[], (cards: RuleCardModel[]) => void, (queue: RuleCardModel[]) => void] {\r\n\r\n    const [cards, setCards] = useState<RuleCardModel[]>(StorageService.getCards());\r\n    const [applyResult, applyLoading, ruleToApply, setRuleToApply] = useFetchApplyRule(startPath);\r\n    const [queue, setQueue] = useState<RuleCardModel[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (applyResult && applyResult.success) {\r\n            queue.splice(0, 1);\r\n            setQueue([...queue]);\r\n        }\r\n    }, [applyResult])\r\n\r\n    useEffect(() => {\r\n        if (ruleToApply) {\r\n            ruleToApply.isWorking = applyLoading\r\n            ruleToApply.isActive = applyLoading\r\n            setCards([...cards])\r\n        }\r\n    }, [ruleToApply, applyLoading])\r\n\r\n    useEffect(() => {\r\n        if (queue.length > 0) {\r\n            setRuleToApply(queue[0]);\r\n        } else if (ruleToApply) {\r\n            setRuleToApply(null);\r\n        }\r\n    }, [queue])\r\n\r\n    return [cards, setCards, setQueue];\r\n}\r\n","import React, { useState, FunctionComponent } from 'react';\r\nimport classify from '../classify.svg';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { InputAdornment, Button, Fade, Zoom } from '@material-ui/core';\r\nimport Done from '@material-ui/icons/Done';\r\nimport Close from '@material-ui/icons/Close';\r\nimport { debounce } from 'lodash-es';\r\nimport Send from '@material-ui/icons/Send';\r\nimport { useCheckPath } from '../hooks/classify-hooks';\r\nimport { StorageService } from '../services/storage.service';\r\n\r\n\r\nexport const HomePage: FunctionComponent<{ startWorkingOn: (path: string) => void }> = ({ startWorkingOn }) => {\r\n\r\n    const [startPath, setStartPath] = useState(StorageService.getClassifyPath());\r\n    const [startPathChecked] = useCheckPath(startPath);\r\n\r\n    const CheckedIcon = () => {\r\n        if (startPath === '') return null;\r\n\r\n        return startPathChecked ? <Done color=\"primary\" /> : <Close color=\"secondary\" />\r\n    }\r\n\r\n    const handleChangeDebounced = debounce((value: string) => {\r\n        setStartPath(value);\r\n    }, 200);\r\n\r\n    const handleKeyDown = (event: any) => {\r\n        if (startPathChecked && event.keyCode === 13) {\r\n            start();\r\n        }\r\n    }\r\n\r\n    const start = () => {\r\n        startWorkingOn(startPath);\r\n        StorageService.saveClassifyPath(startPath);\r\n    }\r\n\r\n    return (\r\n        <section className=\"home\">\r\n            <Zoom in>\r\n                <div className=\"container\">\r\n                    <img src={classify} className=\"app-logo\" alt=\"classify\" />\r\n\r\n                    <TextField\r\n                        className=\"input-start\"\r\n                        defaultValue={startPath}\r\n                        onChange={e => handleChangeDebounced(e.target.value)}\r\n                        onKeyUp={handleKeyDown}\r\n                        label=\"Dossier à classer\"\r\n                        placeholder=\"Chemin complet du dossier source\"\r\n                        fullWidth\r\n                        color={startPathChecked ? 'primary' : 'secondary'}\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position=\"end\">\r\n                                <CheckedIcon />\r\n                            </InputAdornment>,\r\n                        }}>\r\n                    </TextField>\r\n\r\n                    {startPath && startPathChecked &&\r\n                        <div className=\"start-button\">\r\n                            <Fade in>\r\n                                <Button\r\n                                    onClick={start}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    endIcon={<Send />}>\r\n                                    Commencer\r\n                                </Button>\r\n                            </Fade>\r\n                        </div>}\r\n                </div>\r\n            </Zoom>\r\n        </section>\r\n    )\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\nimport classify from '../classify.svg';\r\nimport { Typography, Button } from '@material-ui/core';\r\n\r\nexport const HeaderWorking: FunctionComponent<{ startPath: string, countFiles: number, onBackHome: () => void }> = ({ startPath, countFiles, onBackHome }) => {\r\n    return (\r\n        <header className=\"card header\">\r\n            <img src={classify} className=\"app-logo\" alt=\"classify\" />\r\n\r\n            <div className=\"path-info\">\r\n                <Typography variant=\"subtitle1\" >\r\n                    {startPath}\r\n                </Typography>\r\n\r\n                <Typography variant=\"subtitle2\" color=\"primary\" >\r\n                    <strong>({countFiles} fichier{countFiles > 1 ? 's' : ''})</strong>\r\n                </Typography>\r\n            </div>\r\n\r\n            <Button color=\"primary\" onClick={onBackHome}>Retour au choix du dossier</Button>\r\n        </header>\r\n    )\r\n};\r\n\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport Add from '@material-ui/icons/Add';\r\n\r\nexport const PrimaryActions: FunctionComponent<{ handleAddRule: () => void, handleApplyRules: () => void, countRule: number }> =\r\n    ({ handleAddRule, handleApplyRules, countRule }) => {\r\n        return (\r\n            <div className=\"primary-actions\">\r\n                <Button\r\n                    onClick={handleAddRule}\r\n                    className=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    startIcon={<Add />}>\r\n                    Ajouter une regle\r\n                </Button>\r\n\r\n                {countRule > 1 &&\r\n                    <Button\r\n                        onClick={handleApplyRules}\r\n                        className=\"button\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\">\r\n                        Appliquer les {countRule} regles\r\n                    </Button>\r\n                }\r\n            </div>\r\n        )\r\n    };\r\n\r\n","import React, { FunctionComponent } from 'react';\r\nimport { TextField, FormControl, Select, MenuItem, Typography, Avatar, Checkbox, RadioGroup, FormControlLabel, Radio, LinearProgress, ListItemText } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CreateNewFolder from '@material-ui/icons/CreateNewFolder';\r\nimport { RuleCardModel } from '../models/rule-card.model';\r\nimport { useCheckPath } from '../hooks/classify-hooks';\r\nimport { debounce } from 'lodash-es';\r\n\r\ntype RuleCardProp = {\r\n    fileTypeList: string[],\r\n    card: RuleCardModel,\r\n    onSaveChanges: () => void,\r\n    onDelete: (card: RuleCardModel) => void\r\n    applyRule: (card: RuleCardModel) => void\r\n}\r\n\r\nexport const RuleCard: FunctionComponent<RuleCardProp> = ({ fileTypeList, card, onSaveChanges, onDelete, applyRule }) => {\r\n\r\n    const [targetPathChecked] = useCheckPath('' + card.targetPath);\r\n\r\n    const handleChange = (event: any) => {\r\n        const { name, value } = event.target;\r\n        card[name as 'actionType' | 'targetPath'] = value;\r\n        onSaveChanges();\r\n    }\r\n\r\n    const handleChangeDebounced = debounce((target: any) => {\r\n        handleChange({ target });\r\n    }, 300);\r\n\r\n    const handleChangeCheckbox = (event: any) => {\r\n        const { name, checked } = event.target;\r\n        card[name as 'isActive'] = checked;\r\n        onSaveChanges();\r\n    }\r\n\r\n    const handleChangeSelect = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        card.fileTypes = event.target.value as string[]\r\n        onSaveChanges();\r\n    };\r\n\r\n    return (\r\n        <article>\r\n            <div className={`card ${!card.isActive ? 'disabled' : ''}`}>\r\n\r\n                <div className=\"card-container\">\r\n                    <Checkbox\r\n                        color=\"default\"\r\n                        edge=\"start\"\r\n                        name=\"isActive\"\r\n                        onChange={handleChangeCheckbox}\r\n                        checked={card.isActive} />\r\n                </div>\r\n\r\n                <div className=\"card-container\">\r\n\r\n                    <div className=\"card-content\">\r\n                        <Typography color=\"textSecondary\" className=\"label-select\">Type(s) de fichier : </Typography>\r\n\r\n                        <FormControl variant=\"standard\">\r\n                            <Select\r\n                                disabled={!card.isActive}\r\n                                multiple\r\n                                name=\"fileTypes\"\r\n                                renderValue={selected => (selected as string[]).join(', ')}\r\n                                onChange={handleChangeSelect}\r\n                                value={card.fileTypes}>\r\n                                {fileTypeList.map((fileTypeName) => {\r\n                                    return (\r\n                                        <MenuItem key={fileTypeName} value={fileTypeName}>\r\n                                            <Checkbox checked={card.fileTypes.indexOf(fileTypeName) > -1} />\r\n                                            <ListItemText primary={fileTypeName} />\r\n                                        </MenuItem>\r\n                                    )\r\n                                })}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n\r\n                    <div className=\"card-content\">\r\n                        <RadioGroup\r\n                            onChange={handleChange}\r\n                            value={card.actionType}\r\n                            name=\"actionType\"\r\n                            style={{ flexDirection: 'row' }} >\r\n                            <FormControlLabel\r\n                                disabled={!card.isActive}\r\n                                value=\"move\"\r\n                                control={<Radio color=\"primary\" />}\r\n                                label=\"Déplacer vers\" />\r\n\r\n                            <FormControlLabel\r\n                                disabled={!card.isActive}\r\n                                value=\"deleted\"\r\n                                control={<Radio color=\"primary\" />}\r\n                                label=\"Supprimer\" />\r\n                        </RadioGroup>\r\n                    </div>\r\n\r\n                    {card.actionType === 'move' &&\r\n                        <div className=\"card-content\">\r\n                            <Avatar className=\"icon-folder\">\r\n                                <FolderIcon />\r\n                            </Avatar>\r\n                            <TextField\r\n                                name=\"targetPath\"\r\n                                disabled={!card.isActive}\r\n                                onChange={e => handleChangeDebounced(e.target)}\r\n                                defaultValue={card.targetPath}\r\n                                fullWidth\r\n                                label=\"Dossier cible\"\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    endAdornment: card.targetPath && !targetPathChecked && <CreateNewFolder color=\"primary\" />,\r\n                                }} />\r\n                        </div>\r\n                    }\r\n\r\n                    <div className=\"card-content\">\r\n                        <Button\r\n                            disabled={!card.canApply}\r\n                            className=\"button\"\r\n                            variant=\"outlined\"\r\n                            size=\"medium\"\r\n                            onClick={() => applyRule(card)}>\r\n                            Appliquer la regle\r\n                        </Button>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"card-container\">\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        onClick={() => onDelete(card)}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            {card.isWorking && <LinearProgress className=\"progress-bar\" />}\r\n        </article >\r\n    )\r\n};\r\n\r\n","import ReactDOM from 'react-dom';\r\nimport { ReactNode } from 'react';\r\n\r\nexport abstract class DialogService<T = { confirm: boolean }>{\r\n\r\n    private container: HTMLDivElement;\r\n\r\n    private resolve: ((value: T) => void) | undefined;\r\n\r\n    private node: ReactNode;\r\n\r\n    constructor() {\r\n        this.container = document.createElement('div');\r\n        this.container = document.createElement('div');\r\n        this.container.classList.add('dialog-app');\r\n    }\r\n\r\n    protected setDialog(node: ReactNode) {\r\n        this.node = node;\r\n    }\r\n\r\n    protected confirm(value: T) {\r\n        this.close();\r\n\r\n        if (this.resolve) {\r\n            this.resolve(value);\r\n        }\r\n    }\r\n\r\n    private close() {\r\n        ReactDOM.unmountComponentAtNode(this.container)\r\n        document.body.removeChild(this.container);\r\n    }\r\n\r\n    private render(node: any) {\r\n        document.body.appendChild(this.container);\r\n        ReactDOM.render(node, this.container);\r\n    }\r\n\r\n    show() {\r\n        return new Promise<T>((resolve) => {\r\n            this.resolve = resolve;\r\n            this.render(this.node);\r\n        });\r\n    }\r\n}\r\n\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\r\n\r\nexport type DialogConfirmProps<T = { confirm: boolean }> = {\r\n    textConfirm: string,\r\n    textCancel: string,\r\n    textTitle: string,\r\n    textContent: string,\r\n    onConfirm: (data: T) => void;\r\n}\r\n\r\nexport const ConfirmDialog: FunctionComponent<DialogConfirmProps> = (props) => (\r\n    <Dialog\r\n        open\r\n        onClose={() => props.onConfirm({ confirm: false })}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\">\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n            {props.textTitle}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n                {props.textContent}\r\n            </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button color=\"primary\" onClick={() => props.onConfirm({ confirm: false })}>\r\n                {props.textCancel}\r\n            </Button>\r\n            <Button color=\"primary\" autoFocus onClick={() => props.onConfirm({ confirm: true })}>\r\n                {props.textConfirm}\r\n            </Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n)\r\n\r\n","import React from 'react';\r\nimport { DialogService } from './dialog.service';\r\nimport { ConfirmDialog } from '../components/confirm-dialog';\r\n\r\nexport type DialogServiceData = {\r\n    textConfirm: string,\r\n    textCancel: string,\r\n    textTitle: string,\r\n    textContent: string\r\n}\r\n\r\nexport class ConfirmDialogService extends DialogService {\r\n\r\n    constructor(data: DialogServiceData) {\r\n        super();\r\n\r\n        this.setDialog(<ConfirmDialog\r\n            textConfirm={data.textConfirm}\r\n            textCancel={data.textCancel}\r\n            textTitle={data.textTitle}\r\n            textContent={data.textContent}\r\n            onConfirm={(value) => this.confirm(value)}>\r\n        </ConfirmDialog>);\r\n    }\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\nimport { HeaderWorking } from './header-working';\r\nimport { PrimaryActions } from './primary-actions';\r\nimport { RuleCard } from '../components/rule-card';\r\nimport { useFetchExtensions, useRulesQueue } from '../hooks/classify-hooks';\r\nimport { LinearProgress } from '@material-ui/core';\r\nimport { RuleCardModel } from '../models/rule-card.model';\r\nimport { ConfirmDialogService } from '../services/confirm-dialog.service';\r\nimport { StorageService } from '../services/storage.service';\r\n\r\nexport const WorkingPage: FunctionComponent<{ startPath: string, setStartPath: (path: string) => void }> = ({ startPath, setStartPath }) => {\r\n\r\n    const [resultFetchextensions, extensionsLoading] = useFetchExtensions(startPath);\r\n    const [cards, setCards, setQueue] = useRulesQueue(startPath);\r\n\r\n    const addCard = () => {\r\n        setCards([\r\n            ...cards,\r\n            new RuleCardModel()\r\n        ]);\r\n    }\r\n\r\n    const countActiveCards = () => cards.filter(c => c.canApply).length;\r\n\r\n    const saveChangesCard = () => {\r\n        setCards([...cards]);\r\n        StorageService.saveCards(cards);\r\n    }\r\n\r\n    const deleteCard = async (card: RuleCardModel) => {\r\n        function _delete() {\r\n            const index = cards.indexOf(card);\r\n            cards.splice(index, 1);\r\n            setCards([...cards]);\r\n            StorageService.saveCards(cards);\r\n        }\r\n\r\n        if (!card.hasValue) {\r\n            _delete();\r\n            return;\r\n        }\r\n\r\n        const result = await new ConfirmDialogService({\r\n            textTitle: 'Suppression de la regle',\r\n            textContent: 'Voulez vous vraiment supprimer cette règle?',\r\n            textCancel: 'Annuler',\r\n            textConfirm: 'Supprimer'\r\n        }).show();\r\n\r\n        if (result.confirm) {\r\n            _delete();\r\n        }\r\n    }\r\n\r\n    const applyRuleCard = async (card: RuleCardModel) => {\r\n        const result = await new ConfirmDialogService({\r\n            textTitle: `Application de la regle de ${card.actionType === 'move' ? 'déplacement' : 'suppression'}`,\r\n            textContent: `Voulez vous vraiment appliquer la règle de ${card.actionType === 'move' ? 'déplacement' : 'suppression'}?`,\r\n            textCancel: 'Annuler',\r\n            textConfirm: 'Appliquer'\r\n        }).show();\r\n\r\n        if (result.confirm) {\r\n            setQueue([card]);\r\n        }\r\n    }\r\n\r\n    const applyAllRulesCards = async () => {\r\n        const result = await new ConfirmDialogService({\r\n            textTitle: 'Application de toute les règles',\r\n            textContent: `Voulez vous vraiment appliquer successivement les ${countActiveCards()} règles ?`,\r\n            textCancel: 'Annuler',\r\n            textConfirm: `Appliquer (${countActiveCards()})`\r\n        }).show();\r\n\r\n        if (result.confirm) {\r\n            setQueue(cards.filter(card => card.canApply));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className=\"working\">\r\n            <div className=\"container\">\r\n                {extensionsLoading && <LinearProgress />}\r\n\r\n                {resultFetchextensions && (\r\n                    <>\r\n                        <HeaderWorking\r\n                            startPath={startPath}\r\n                            countFiles={resultFetchextensions.countFiles}\r\n                            onBackHome={() => { setStartPath('') }} />\r\n\r\n                        {cards.map((card, index) =>\r\n                            <RuleCard\r\n                                key={index}\r\n                                card={card}\r\n                                fileTypeList={resultFetchextensions.extensions}\r\n                                onSaveChanges={saveChangesCard}\r\n                                onDelete={deleteCard}\r\n                                applyRule={applyRuleCard} />\r\n                        )}\r\n\r\n                        <PrimaryActions\r\n                            handleAddRule={addCard}\r\n                            handleApplyRules={applyAllRulesCards}\r\n                            countRule={countActiveCards()} />\r\n                    </>\r\n                )}\r\n            </div>\r\n        </section >\r\n    )\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport { HomePage } from './layout/home-page';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\r\nimport { WorkingPage } from './layout/working-page';\r\nimport './scss/main.scss'\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: '#ffa115'\r\n    }\r\n  }\r\n});\r\n\r\n\r\nexport const App = () => {\r\n\r\n  const [startPath, setStartPath] = useState();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <main className=\"app\">\r\n        {!startPath || startPath === '' ?\r\n          <HomePage startWorkingOn={setStartPath} />\r\n          :\r\n          <WorkingPage startPath={startPath} setStartPath={setStartPath} />}\r\n      </main>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/classify.e1ec5b06.svg\";"],"sourceRoot":""}